public class Solution {
	//A robot goes from (1,1) to (m,n) in a matrix and can only go down or right;
	public int MaxGold(int[][] nums){
		if(nums.length==0)	return 0;
		int[] max=new int[1];
		dfs(nums,0,0,0,max);
		return max[0];
	}
	private void dfs(int[][] nums, int i, int j, int sum, int[] max){
		sum+=nums[i][j];
		if(i==nums.length-1&&j==nums[0].length-1){
		   max[0]=Math.max(max[0], sum);
		   return;
		}
		if(i<nums.length-1){
			dfs(nums, i+1, j, sum, max);	
		}
		if(j<nums[0].length-1){
			dfs(nums, i, j+1, sum, max);	
		}
	}
	public int MaxGoldII(int[][] nums){
		if(nums.length==0)	return 0;
		int m=nums.length, n=nums[0].length;
        	int[] dp=new int[n];
		dp[0]=nums[0][0];
		for(int j=1;j<n;j++){
			dp[j]=dp[j-1]+nums[0][j];
		}
        	for(int i=1;i<m;i++){
        		for(int j=0;j<n;j++){
        			if(j==0){
        				dp[j]+=nums[i][j];
        			}else{
        				dp[j]=nums[i][j]+Math.max(dp[j],dp[j-1]);
        			}
        		}
        	}
		return dp[n-1];
	}
	public static void main(String[] args){
		//int[][] nums={{1,4,2,1},{2,1,4,3},{4,3,2,1}};
		int[][] nums={{1,4,5,1},{2,6,4,-3},{4,3,-2,1}};
		int res=new Solution().MaxGold(nums);
		System.out.println("The max gold is "+res+".");
		res=new Solution().MaxGoldII(nums);
		System.out.println("The max gold is "+res+".");
	}
}
